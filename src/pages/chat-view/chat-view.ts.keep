import { Component, ElementRef, ViewChild, NgZone } from '@angular/core';
import { IonicPage, Platform, NavController, NavParams, Events, Content, ModalController } from 'ionic-angular';

import { UserProvider } from './../../providers/user/user';
import { AlertProvider } from './../../providers/alert/alert';
import { LoaderProvider } from './../../providers/loader/loader';
import { ApiProvider } from './../../providers/api/api';
import { TranslateService } from '@ngx-translate/core';

@IonicPage({
	name: 'chat-view'
})
@Component({
	selector: 'page-chat-view',
	templateUrl: 'chat-view.html',
})
export class ChatViewPage {
	@ViewChild(Content) content: Content;
	id: string;
	message: string;
	reciever_id: number;
	chat_title: number;
	chat: any = [];
	chatDuration: any;
	property_id: any;

	constructor(translate: TranslateService,
		public navCtrl: NavController,
		private platform: Platform,
		private _ngZone: NgZone,
		public navParams: NavParams, public events: Events, public user: UserProvider,
		public api: ApiProvider, public alert: AlertProvider, public loader: LoaderProvider,
		public modalCtrl: ModalController
		) {
		translate.setDefaultLang(localStorage.language);

	}

	ionViewDidLoad() {
		this.platform.resume.subscribe(() => {
			this.readMessages();
			this.getChatMessages();
		});
	}

	ionViewWillEnter() {
		this.chat_title = this.navParams.get('title');
		this.id = this.navParams.get('id');
		this.property_id = this.navParams.get('property_id');
		this.events.subscribe('MESSAGE:RECIEVED', (notificationData: any) => {
			let data = JSON.parse(notificationData.data);
			if (this.property_id == data.property_id) {
				this._ngZone.run(() => {
					this.chat.push(data);
				});
			}
		});
		this.user.hideTabs = true;
		this.readMessages();
		this.getChatMessages();
	}

	ionViewWillLeave() {
		this.user.hideTabs = false;
		this.events.unsubscribe('MESSAGE:RECIEVED');
	}

	/** add appointment */
	addAppointment() {
		this.navCtrl.push("AddAppointmentPage", { reciever_id: this.reciever_id, property_id: this.property_id, chat_title: this.chat_title });
	}

	readMessages() {
		let params = {
			thread_id: this.id,
			user_id: this.user.user_id,
		}
		this.api.put(params, 'api/chats/read' ).subscribe(data => {
			if (data.status === 200) {
			}
		}, err => {
		})
	}

	/** get chat messages */
	getChatMessages() {
		let params = {
			sender_id: this.user.user_id,
			receiver_id: this.reciever_id,
			property_id: this.property_id
		}
		this.api.get({}, 'api/chats/' + this.id).subscribe(data => {
			if (data.status === 200) {
				this.getNewMessage();
				this.chat = data.data;
				setTimeout(() => {
					this.scroll();
				}, 200);
			}
		}, err => {
			console.log(err);
		})
	}

	getNewMessage() {
		this.events.publish('NEWMESSAGE');
	}

	/** send message */
	sendMessage() {
		if (this.message != undefined && this.message != '') {
			let params = {
				user_id: Number(this.user.user_id),
				thread_id: this.id,
				message: this.message,
				property_id: this.property_id
			}
			this.message = '';
			this.api.post(params, 'api/chats').subscribe(data => {
				if (data.status === 200) {
					this.chat.push(data.data);
					setTimeout(() => {
						this.scroll();
					}, 200);
				}
			}, err => {
				console.log(err);
			})
		}
	}

	ScrollToBottom() {
		var element = document.getElementById('myLabel');
		setTimeout(() => {
			element.scrollIntoView(true);
		}, 200);
	}

	autoScroll() {
		setTimeout(function () {
			var itemList = document.getElementById('chat-autoscroll');
			itemList.scrollTop = itemList.scrollHeight;
		});
	}

	scroll() {
		if (this.content) {
			this.content.scrollToBottom();
		}
	}

	acceptOrRejectAppoitment(messageId: any, appointmentId: any, type: any, index: any) {
		let params = {
			appointment_id: appointmentId,
			message_id: messageId,
			request: type
		}
		this.user.callApi(params, 'appointment_accept_reject').subscribe(data => {
			if (data.status != 0) {
				this.chat.splice(index, 1);
				this.message = (type == 1) ? "Your appointment has been accepted" : "Your appointment has been declined"
				this.sendMessage();
			}
		}, err => {
			console.log(err);
		})
	}



	openDetail() {
		let params = {
			user_id: this.user.user_id,
			property_id: this.property_id
		}
		this.user.callApi(params, 'get_property').subscribe(data => {
			console.log(data);
			if (data.status != 0) {
				const modal = this.modalCtrl.create("PropertyDetailPage", {
					detail: data.data,
					from: "CHAT_PAGE"
				});
				modal.onDidDismiss((data) => {
					if(data.option == 'cancel'){
						this.voteUp(false, data.data.id)
					}
				});
				modal.present();
			}
		}, err => {
			console.log(err);
		})
	}

	voteUp(like: boolean, propertyId) {
		this.acceptRejectProperty(this.user.user_id, propertyId, 0);
	}

	acceptRejectProperty(userId, propertyId, type) {
		let params = {
			user_id: userId,
			property_id: propertyId,
			request: type
		}
		this.user.callApi(params, 'property_accept_reject').subscribe(data => {

		}, err => {
			this.alert.showAlert("Error", 'Server not responding');
		})
	}

	getChatDate(date) {
		return new Date(date);
	}

	isMe(msg) {
		return	(msg.user_id === Number(this.user.user_id));
	}
}
